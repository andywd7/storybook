/// Grid system

// Initial map of our breakpoints and their values
$nt-grid-breakpoints: (
  xs: (
    columns: 12,
    width: 0
  ),
  sm: (
    columns: 12,
    width: $breakpoint-sm
  ),
  md: (
    columns: 12,
    margin: nt-rem(32px),
    width: $breakpoint-md
  ),
  lg: (
    columns: 12,
    width: $breakpoint-lg
  ),
  xlg: (
    columns: 12,
    width: $breakpoint-xlg
  ),
  xxlg: (
    columns: 12,
    width: $breakpoint-xxlg
  ),
  xxxlg: (
    columns: 12,
    width: $breakpoint-xxxlg
  ),
  max: (
    columns: 24,
    width: $breakpoint-max
  )
) !default;

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function nt-grid-breakpoint-min($name, $breakpoints: $nt-grid-breakpoints) {
  $min: map-deep-get($breakpoints, $name, width);
  @return if($min != 0, $min, null);
}

// Returns a blank string if smallest (first) breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
@function nt-grid-breakpoint-infix($name, $breakpoints: $nt-grid-breakpoints) {
  @return if(nt-grid-breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin nt-grid-breakpoint-up($name, $breakpoints: $nt-grid-breakpoints) {
  $width: nt-grid-breakpoint-min($name, $breakpoints);
  @if $width {
    @media (min-width: $width) {
      @content;
    }
  } @else {
    @content;
  }
}

// Generate semantic grid columns with these mixins.
@mixin make-container($gutter: $grid-gutter, $breakpoints: $nt-grid-breakpoints) {
  margin-left: auto;
  margin-right: auto;
  max-width: nt-rem($breakpoint-max);

  @each $breakpoint in map-keys($breakpoints) {
    $padding: map-deep-get($breakpoints, $breakpoint, margin);

    @include nt-grid-breakpoint-up($breakpoint, $breakpoints) {
      padding-left: $padding;
      padding-right: $padding;
    }
  }
}

@mixin make-row($gutter: $grid-gutter) {
  display: flex;
  flex-wrap: wrap;
  margin-left: $gutter / -2;
  margin-right: $gutter / -2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 auto;
  width: percentage($size / $columns);
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($gutter: $grid-gutter, $breakpoints: $nt-grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
    position: relative;
    width: 100%;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: nt-grid-breakpoint-infix($breakpoint, $breakpoints);
    $columns: map-deep-get($breakpoints, $breakpoint, columns);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .#{$prefix}-col-#{$i},
      .#{$prefix}-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .#{$prefix}-col,
    .#{$prefix}-col#{$infix},
    .#{$prefix}-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include nt-grid-breakpoint-up($breakpoint, $breakpoints) {
      .#{$prefix}-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .#{$prefix}-col#{$infix}-auto {
        @include make-col-auto();
      }

      @for $i from 1 through $columns {
        .#{$prefix}-col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }
    }
  }
}
